{
    "docs": [
        {
            "location": "/", 
            "text": "A Typescript compatible imgur client for node.\n\n\nGetting Started\n\n\nInstall using npm.\n\n\nnpm install @rmp135/imgur\n\n\n\n\nor yarn\n\n\nyarn add @rmp135/imgur\n\n\n\n\nimport the Client from the package.\n\n\nimport { Client } from '@rmp135/imgur'\n\n\n\n\nInstantiate the Client with your credentials and call the relevant API endpoint. If you do not have credentials, refer to the \nauthorization\n documentation on how to obtain these.\n\n\nThe documentation in this guide will be written with Typescript / ES7 in mind. The \n.then / .catch\n callbacks still function as you would expect.\n\n\n// The client can be initialised with the client_id.\n\nlet client = new Client('43652b743b5a7a0')\n\n// Or with full authorization information.\n\nclient = new Client({\n  access_token: 'be3fb3e75b229254c8a44e41e376bfc01154ba42',\n  client_id: '43652b743b5a7a2',\n  client_secret: '2817603add0052fc9920bd3896abdd26992cf422',\n  refresh_token: '71f0489801d0d6ae906f51ea20ae562b2ef18d42',\n  mashape_key: 'mashapekey'\n})\n\nconst images = await client.Gallery.subRedditGalleries('pics')\n\nconsole.log(images)", 
            "title": "Home"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Install using npm.  npm install @rmp135/imgur  or yarn  yarn add @rmp135/imgur  import the Client from the package.  import { Client } from '@rmp135/imgur'  Instantiate the Client with your credentials and call the relevant API endpoint. If you do not have credentials, refer to the  authorization  documentation on how to obtain these.  The documentation in this guide will be written with Typescript / ES7 in mind. The  .then / .catch  callbacks still function as you would expect.  // The client can be initialised with the client_id.\n\nlet client = new Client('43652b743b5a7a0')\n\n// Or with full authorization information.\n\nclient = new Client({\n  access_token: 'be3fb3e75b229254c8a44e41e376bfc01154ba42',\n  client_id: '43652b743b5a7a2',\n  client_secret: '2817603add0052fc9920bd3896abdd26992cf422',\n  refresh_token: '71f0489801d0d6ae906f51ea20ae562b2ef18d42',\n  mashape_key: 'mashapekey'\n})\n\nconst images = await client.Gallery.subRedditGalleries('pics')\n\nconsole.log(images)", 
            "title": "Getting Started"
        }, 
        {
            "location": "/authorization/", 
            "text": "Imgur documentation: \nhttps://api.imgur.com/oauth2\n\n\nImgur uses oath2 for authorization. A number of ways exist to retrieve the access token and refresh token from the user. All of which are supported by this client.\n\n\nThe following tokens are available on the client.\n\n\n\n\nclient_id\n\n\nclient_secret\n\n\nclient_token\n\n\nrefresh_token\n\n\nmashape_key\n\n\n\n\nIf the mashape_key property is provided, the Mashape specific header and API URL will automatically be set.\n\n\nAll authorization calls (except regenerating from a refresh token) return a url for the user to log in and an \nauthorize\n function to authorize that the information supplied by the user is correct.\n\n\nThe application state argument can be ommitted in all cases.\n\n\nbyCode\n\n\nThis returns the authorization code as a url parameter that must be exchanged for the access code.\n\n\n\nclient = new Client('43652b743b5a7a0')\n\nconst auth = client.Authorize.byCode('application state') \n\nconsole.log(auth.url)\n\n// The user navigates to the url, enters their credentials and a url with a `code` url parameter is returned. Put this code into the `authorize` function.\n\nconst tokens = await auth.authorize('https://imgur.com/?state=\ncode=e12f6b535469cc2a8b9c49cc42681eb8117f7a61')\n\n// If successful, the authorization tokens will be returned and populated on the client.\n\n\n\n\n\nbyToken\n\n\nThis returns the code as a url that can be parsed to extract the access code and refresh token.\n\n\n\nclient = new Client('43652b743b5a7a0')\n\nconst auth = client.Authorize.byToken('application state') \n\nconsole.log(auth.url)\n\n// The user navigates to the url and enters their credentials. A url with the access credentials are then returned. Put this url into the 'authorize' function.\n\nconst tokens = auth.authorize('https://imgur.com/#access_token=c6f67dc9be42c74cfb052a640d51b056d9a06c42\nexpires_in=2419200\ntoken_type=bearer\nrefresh_token=94294ec17cf55ac9650f0e040649d8985cf624d4\naccount_username=rmp135\naccount_id=4118974')\n\n// If successful, the authorization tokens will be returned and populated on the client.\n\n\n\n\n\nbyPIN\n\n\nThis returns a url that, when the user logs in, is displayed with a PIN code. Enter this PIN code into the authorize function.\n\n\n\nclient = new Client('43652b743b5a7a0')\n\nconst auth = client.Authorize.byPIN('application state') \n\nconsole.log(auth.url)\n\n// The user navigates to the url and enters their credentials. A page with a PIN code will be displayed. Pass this into the authorize function.\n\nconst tokens = auth.authorize('4118974')\n\n// If successful, the authorization tokens will be returned and populated on the client.\n\n\n\n\n\nregenerateFromRefreshToken\n\n\nThis will regenerate the access token from a refresh token.\n\n\n\nclient = new Client('43652b743b5a7a0')\n\n// If the refresh token is not supplied, it will be taken from the client. If neither are supplied, a warning is shown and null is returned.\n\nconst auth = await client.Authorize.regenerateFromRefreshToken('94294ec17cf55ac9650f0e040649d8985cf624d4') \n\nconsole.log(auth)\n\n// If successful, the authorization tokens will be returned and populated on the client.", 
            "title": "Authorization"
        }, 
        {
            "location": "/authorization/#bycode", 
            "text": "This returns the authorization code as a url parameter that must be exchanged for the access code.  \nclient = new Client('43652b743b5a7a0')\n\nconst auth = client.Authorize.byCode('application state') \n\nconsole.log(auth.url)\n\n// The user navigates to the url, enters their credentials and a url with a `code` url parameter is returned. Put this code into the `authorize` function.\n\nconst tokens = await auth.authorize('https://imgur.com/?state= code=e12f6b535469cc2a8b9c49cc42681eb8117f7a61')\n\n// If successful, the authorization tokens will be returned and populated on the client.", 
            "title": "byCode"
        }, 
        {
            "location": "/authorization/#bytoken", 
            "text": "This returns the code as a url that can be parsed to extract the access code and refresh token.  \nclient = new Client('43652b743b5a7a0')\n\nconst auth = client.Authorize.byToken('application state') \n\nconsole.log(auth.url)\n\n// The user navigates to the url and enters their credentials. A url with the access credentials are then returned. Put this url into the 'authorize' function.\n\nconst tokens = auth.authorize('https://imgur.com/#access_token=c6f67dc9be42c74cfb052a640d51b056d9a06c42 expires_in=2419200 token_type=bearer refresh_token=94294ec17cf55ac9650f0e040649d8985cf624d4 account_username=rmp135 account_id=4118974')\n\n// If successful, the authorization tokens will be returned and populated on the client.", 
            "title": "byToken"
        }, 
        {
            "location": "/authorization/#bypin", 
            "text": "This returns a url that, when the user logs in, is displayed with a PIN code. Enter this PIN code into the authorize function.  \nclient = new Client('43652b743b5a7a0')\n\nconst auth = client.Authorize.byPIN('application state') \n\nconsole.log(auth.url)\n\n// The user navigates to the url and enters their credentials. A page with a PIN code will be displayed. Pass this into the authorize function.\n\nconst tokens = auth.authorize('4118974')\n\n// If successful, the authorization tokens will be returned and populated on the client.", 
            "title": "byPIN"
        }, 
        {
            "location": "/authorization/#regeneratefromrefreshtoken", 
            "text": "This will regenerate the access token from a refresh token.  \nclient = new Client('43652b743b5a7a0')\n\n// If the refresh token is not supplied, it will be taken from the client. If neither are supplied, a warning is shown and null is returned.\n\nconst auth = await client.Authorize.regenerateFromRefreshToken('94294ec17cf55ac9650f0e040649d8985cf624d4') \n\nconsole.log(auth)\n\n// If successful, the authorization tokens will be returned and populated on the client.", 
            "title": "regenerateFromRefreshToken"
        }, 
        {
            "location": "/api/overview/", 
            "text": "The responses from the API will match those given in the \nImgur documentation\n.\n\n\nawait res = client.Gallery.album('USxzb')\nconsole.log(res)\n\n\n\n\nResponse:\n\n\n  \ndata\n: {\n    \nid\n: \nUSxzb\n,\n    \ntitle\n: \nThe definition of \\\nnailing it\\\n,\n    \ndescription\n: null,\n    \ndatetime\n: 1492125017,\n    \ncover\n: \nfGDtDVT\n,\n    \ncover_width\n: 398,\n    \ncover_height\n: 480,\n    \naccount_url\n: \nICanGetYouAToeBy3oClock\n,\n    \naccount_id\n: 37452752,\n    \nprivacy\n: \nhidden\n,\n    \nlayout\n: \nblog\n,\n    \nviews\n: 0,\n    \nlink\n: \nhttp://imgur.com/a/USxzb\n,\n    \nups\n: 8438,\n    \ndowns\n: 88,\n    \npoints\n: 8350,\n    \nscore\n: 8350,\n    \nis_album\n: true,\n    \nvote\n: null,\n    \nfavorite\n: false,\n    \nnsfw\n: false,\n    \nsection\n: \ngifsthatkeepongiving\n,\n    \ncomment_count\n: 375,\n    \ntopic\n: \nNo Topic\n,\n    \ntopic_id\n: 29,\n    \nimages_count\n: 1,\n    \nin_gallery\n: true,\n    \nis_ad\n: false,\n    \ntags\n: [],\n    \nin_most_viral\n: true,\n    \nimages\n: [{\n      \nid\n: \nfGDtDVT\n,\n      \ntitle\n: null,\n      \ndescription\n: \nSource: https://m.youtube.com/watch?v=Ft99FKKsqqE\nytbChannel=SwingNellia\n,\n      \ndatetime\n: 1492124964,\n      \ntype\n: \nimage/gif\n,\n      \nanimated\n: true,\n      \nwidth\n: 398,\n      \nheight\n: 480,\n      \nsize\n: 58245249,\n      \nviews\n: 926608,\n      \nbandwidth\n: 53970513685392,\n      \nvote\n: null,\n      \nfavorite\n: false,\n      \nnsfw\n: null,\n      \nsection\n: null,\n      \naccount_url\n: null,\n      \naccount_id\n: null,\n      \nis_ad\n: false,\n      \ntags\n: [],\n      \nin_most_viral\n: false,\n      \nin_gallery\n: false,\n      \nmp4\n: \nhttp://i.imgur.com/fGDtDVT.mp4\n,\n      \ngifv\n: \nhttp://i.imgur.com/fGDtDVT.gifv\n,\n      \nmp4_size\n: 27041738,\n      \nlink\n: \nhttp://i.imgur.com/fGDtDVTh.gif\n,\n      \nlooping\n: true,\n      \ncomment_count\n: null,\n      \nups\n: null,\n      \ndowns\n: null,\n      \npoints\n: null,\n      \nscore\n: null\n    }]\n  },\n  \nsuccess\n: true,\n  \nstatus\n: 200\n}", 
            "title": "Overview"
        }, 
        {
            "location": "/api/account/", 
            "text": "Imgur Documentation\n\n\nIf the username is ommitted or set as null, the currently authorized user will be used.\n\n\nget\n\n\nParams:\n\n\n\n\nusername?: string\n\n\n\n\nclient.Account.get('username')\n\n\n\n\ngalleryFavorites\n\n\nParams:\n\n\n\n\nusername?: string\n\n\n\n\nclient.Account.galleryFavorites('username')\n\n\n\n\nsubmissions\n\n\nParams:\n\n\n\n\nusername?: string\n\n\n\n\nclient.Account.submissions('username')\n\n\n\n\nsettings\n\n\nOnly the currently authorized user can have their account settings retrieved.\n\n\nclient.Account.settings('username')\n\n\n\n\nchangeSettings\n\n\nOnly the currently authorized user can have their account settings changed.\n\n\nParams:\n\n\n\n\noptions\n\n\nbio?: string\n\n\npublic_images?: boolean\n\n\nmessaging_enabled?: boolean\n\n\nalbum_privacy?: boolean\n\n\naccepted_gallery_terms?: boolean\n\n\nusername?: string\n\n\nshow_mature?: boolean\n\n\nnewsletter_subscribed?: boolean\n\n\n\n\n\n\n\n\nclient.Account.get({ bio: 'bio', messaging_enabled: false })\n\n\n\n\ngalleryProfile\n\n\nParams:\n\n\n\n\nusername?: string\n\n\n\n\nclient.Account.galleryProfile('username')\n\n\n\n\nverifyEmail\n\n\nParams:\n\n\n\n\nusername?: string\n\n\n\n\nclient.Account.verifyEmail('username')\n\n\n\n\nReturns:\n\n\n\n\nEither \ntrue\n or \nfalse\n whether their email has been verified.\n\n\n\n\nsendVerificationEmail\n\n\nOnly the current authorized user can have their verification email sent.\n\n\nclient.Account.sendVerificationEmail()\n\n\n\n\nalbums\n\n\nParams:\n\n\n\n\nusername?: string\n\n\npage?: number\n\n\n\n\nclient.Account.albums(null, 2)\n\n\n\n\nalbum\n\n\nParams:\n\n\n\n\nusername?: string\n\n\nalbumId: string\n\n\n\n\nclient.Account.albums('username', 'albumId')\n\n\n\n\nalbumsIds\n\n\nParams:\n\n\n\n\nusername?: string\n\n\npage?: number\n\n\n\n\nclient.Account.albumIds('username', 2)\n\n\n\n\nalbumCount\n\n\nParams:\n\n\n\n\nusername?: string\n\n\n\n\nclient.Account.albumCount('username')\n\n\n\n\nalbumRemove\n\n\nParams:\n\n\n\n\nusername?: string\n\n\nalbumId: string\n\n\n\n\nclient.Account.albums('username', 'albumId')\n\n\n\n\ncomments\n\n\nParams:\n\n\n\n\nusername?: string\n\n\noptions?:\n\n\npage?: number\n\n\nsort?: 'best' or 'top' or 'new'\n\n\n\n\n\n\n\n\nclient.Account.comments('username', { page: 2, sort: 'best' })\n\n\n\n\ncomment\n\n\nParams:\n\n\n\n\nusername?: string\n\n\ncommentId: number\n\n\n\n\nclient.Account.albums('username', 'commentId')\n\n\n\n\ncommentIds\n\n\nParams:\n\n\n\n\nusername?: string\n\n\noptions?:\n\n\npage?: number\n\n\nsort?: 'best' or 'top' or 'new'\n\n\n\n\n\n\n\n\nclient.Account.commentIds('username', { page: 2, sort: 'best' })\n\n\n\n\ncommentCount\n\n\nParams:\n\n\n\n\nusername?: string\n\n\n\n\nclient.Account.commentCount('username')\n\n\n\n\ncommentRemove\n\n\nParams:\n\n\n\n\nusername?: string\n\n\ncommentId: string\n\n\n\n\nclient.Account.commentRemove('username', 'commentId')\n\n\n\n\nimages\n\n\nParams:\n\n\n\n\nusername?: string\n\n\npage?: number\n\n\n\n\nclient.Account.images('username', 2)\n\n\n\n\nimage\n\n\nParams:\n\n\n\n\nusername?: string\n\n\nimageId: string\n\n\n\n\nclient.Account.image('username', 'imageId')\n\n\n\n\nimageIds\n\n\nParams:\n\n\n\n\nusername?: string\n\n\npage?: number\n\n\n\n\nclient.Account.imageIds('username', 2)\n\n\n\n\nimageCount\n\n\nParams:\n\n\n\n\nusername?: string\n\n\n\n\nclient.Account.imageCount('username')\n\n\n\n\nimageRemove\n\n\nOnly images of the currently authorized user can be removed. If an image was uploaded as an anonymous user, it can be deleted with the delete hash.\n\n\nParams:\n\n\n\n\nusername?: string\n\n\ndeleteHash: string\n\n\n\n\nclient.Account.imageRemove('username', 'imageId')\n\n\n\n\nreplies\n\n\nReplies can only be retrieved for the currently authorized user.\n\n\nclient.Account.replies()", 
            "title": "Account"
        }, 
        {
            "location": "/api/account/#get", 
            "text": "Params:   username?: string   client.Account.get('username')", 
            "title": "get"
        }, 
        {
            "location": "/api/account/#galleryfavorites", 
            "text": "Params:   username?: string   client.Account.galleryFavorites('username')", 
            "title": "galleryFavorites"
        }, 
        {
            "location": "/api/account/#submissions", 
            "text": "Params:   username?: string   client.Account.submissions('username')", 
            "title": "submissions"
        }, 
        {
            "location": "/api/account/#settings", 
            "text": "Only the currently authorized user can have their account settings retrieved.  client.Account.settings('username')", 
            "title": "settings"
        }, 
        {
            "location": "/api/account/#changesettings", 
            "text": "Only the currently authorized user can have their account settings changed.  Params:   options  bio?: string  public_images?: boolean  messaging_enabled?: boolean  album_privacy?: boolean  accepted_gallery_terms?: boolean  username?: string  show_mature?: boolean  newsletter_subscribed?: boolean     client.Account.get({ bio: 'bio', messaging_enabled: false })", 
            "title": "changeSettings"
        }, 
        {
            "location": "/api/account/#galleryprofile", 
            "text": "Params:   username?: string   client.Account.galleryProfile('username')", 
            "title": "galleryProfile"
        }, 
        {
            "location": "/api/account/#verifyemail", 
            "text": "Params:   username?: string   client.Account.verifyEmail('username')  Returns:   Either  true  or  false  whether their email has been verified.", 
            "title": "verifyEmail"
        }, 
        {
            "location": "/api/account/#sendverificationemail", 
            "text": "Only the current authorized user can have their verification email sent.  client.Account.sendVerificationEmail()", 
            "title": "sendVerificationEmail"
        }, 
        {
            "location": "/api/account/#albums", 
            "text": "Params:   username?: string  page?: number   client.Account.albums(null, 2)", 
            "title": "albums"
        }, 
        {
            "location": "/api/account/#album", 
            "text": "Params:   username?: string  albumId: string   client.Account.albums('username', 'albumId')", 
            "title": "album"
        }, 
        {
            "location": "/api/account/#albumsids", 
            "text": "Params:   username?: string  page?: number   client.Account.albumIds('username', 2)", 
            "title": "albumsIds"
        }, 
        {
            "location": "/api/account/#albumcount", 
            "text": "Params:   username?: string   client.Account.albumCount('username')", 
            "title": "albumCount"
        }, 
        {
            "location": "/api/account/#albumremove", 
            "text": "Params:   username?: string  albumId: string   client.Account.albums('username', 'albumId')", 
            "title": "albumRemove"
        }, 
        {
            "location": "/api/account/#comments", 
            "text": "Params:   username?: string  options?:  page?: number  sort?: 'best' or 'top' or 'new'     client.Account.comments('username', { page: 2, sort: 'best' })", 
            "title": "comments"
        }, 
        {
            "location": "/api/account/#comment", 
            "text": "Params:   username?: string  commentId: number   client.Account.albums('username', 'commentId')", 
            "title": "comment"
        }, 
        {
            "location": "/api/account/#commentids", 
            "text": "Params:   username?: string  options?:  page?: number  sort?: 'best' or 'top' or 'new'     client.Account.commentIds('username', { page: 2, sort: 'best' })", 
            "title": "commentIds"
        }, 
        {
            "location": "/api/account/#commentcount", 
            "text": "Params:   username?: string   client.Account.commentCount('username')", 
            "title": "commentCount"
        }, 
        {
            "location": "/api/account/#commentremove", 
            "text": "Params:   username?: string  commentId: string   client.Account.commentRemove('username', 'commentId')", 
            "title": "commentRemove"
        }, 
        {
            "location": "/api/account/#images", 
            "text": "Params:   username?: string  page?: number   client.Account.images('username', 2)", 
            "title": "images"
        }, 
        {
            "location": "/api/account/#image", 
            "text": "Params:   username?: string  imageId: string   client.Account.image('username', 'imageId')", 
            "title": "image"
        }, 
        {
            "location": "/api/account/#imageids", 
            "text": "Params:   username?: string  page?: number   client.Account.imageIds('username', 2)", 
            "title": "imageIds"
        }, 
        {
            "location": "/api/account/#imagecount", 
            "text": "Params:   username?: string   client.Account.imageCount('username')", 
            "title": "imageCount"
        }, 
        {
            "location": "/api/account/#imageremove", 
            "text": "Only images of the currently authorized user can be removed. If an image was uploaded as an anonymous user, it can be deleted with the delete hash.  Params:   username?: string  deleteHash: string   client.Account.imageRemove('username', 'imageId')", 
            "title": "imageRemove"
        }, 
        {
            "location": "/api/account/#replies", 
            "text": "Replies can only be retrieved for the currently authorized user.  client.Account.replies()", 
            "title": "replies"
        }, 
        {
            "location": "/api/comment/", 
            "text": "Imgur Documentation\n\n\nget\n\n\nParams:\n\n\n\n\ncommentId: string\n\n\n\n\nclient.Comment.get('commentId')\n\n\n\n\ncreate\n\n\nUser must be authorized to create comments.\n\n\nParams:\n\n\n\n\nimageId: string\n\n\ncomment: string\n\n\nparentId?: string\n\n\n\n\nclient.Comment.create('imageId', 'this is the comment', 'parentCommentId')\n\n\n\n\nremove\n\n\nUser must be authorized as the user that created the comment to delete it.\n\n\nParams:\n\n\n\n\ncommentId: string\n\n\n\n\nclient.Comment.remove('commentId')\n\n\n\n\nreplies\n\n\nParams:\n\n\n\n\ncommentId: string\n\n\n\n\nclient.Comment.replies('commentId')\n\n\n\n\nreplyCreate\n\n\nSimilar to \ncreate\n. Likewise, the client must be authorized to reply to a comment.\n\n\nParams:\n\n\n\n\ncommentId: string\n\n\nimageId: string\n\n\ncomment: string\n\n\n\n\nclient.Comment.replyCreate('commentId', 'imageId', 'this is the comment')\n\n\n\n\nvote\n\n\nThe client must be authorized to vote on a comment.\n\n\nParams:\n\n\n\n\ncommentId: string\n\n\nvote: 'up' or 'down'\n\n\n\n\nclient.Comment.vote('commentId', 'up')\n\n\n\n\nreport\n\n\nParams:\n\n\n\n\ncommentId: string\n\n\nreason?: number\n\n\n\n\nRefer to the \nImgur documentation\n on which numbers refer to which reporting reason.\n\n\nNote: For TypeScript users, the \nReportReasonEnum\n can be used instead of the raw numbers.\n\n\nclient.Comment.report('commentId', 2)", 
            "title": "Comment"
        }, 
        {
            "location": "/api/comment/#get", 
            "text": "Params:   commentId: string   client.Comment.get('commentId')", 
            "title": "get"
        }, 
        {
            "location": "/api/comment/#create", 
            "text": "User must be authorized to create comments.  Params:   imageId: string  comment: string  parentId?: string   client.Comment.create('imageId', 'this is the comment', 'parentCommentId')", 
            "title": "create"
        }, 
        {
            "location": "/api/comment/#remove", 
            "text": "User must be authorized as the user that created the comment to delete it.  Params:   commentId: string   client.Comment.remove('commentId')", 
            "title": "remove"
        }, 
        {
            "location": "/api/comment/#replies", 
            "text": "Params:   commentId: string   client.Comment.replies('commentId')", 
            "title": "replies"
        }, 
        {
            "location": "/api/comment/#replycreate", 
            "text": "Similar to  create . Likewise, the client must be authorized to reply to a comment.  Params:   commentId: string  imageId: string  comment: string   client.Comment.replyCreate('commentId', 'imageId', 'this is the comment')", 
            "title": "replyCreate"
        }, 
        {
            "location": "/api/comment/#vote", 
            "text": "The client must be authorized to vote on a comment.  Params:   commentId: string  vote: 'up' or 'down'   client.Comment.vote('commentId', 'up')", 
            "title": "vote"
        }, 
        {
            "location": "/api/comment/#report", 
            "text": "Params:   commentId: string  reason?: number   Refer to the  Imgur documentation  on which numbers refer to which reporting reason.  Note: For TypeScript users, the  ReportReasonEnum  can be used instead of the raw numbers.  client.Comment.report('commentId', 2)", 
            "title": "report"
        }, 
        {
            "location": "/api/conversation/", 
            "text": "Imgur Documentation\n\n\nThe client must be authorized to retrieve the conversations of a user.\n\n\ngetAll\n\n\nclient.Conversation.getAll()\n\n\n\n\nget\n\n\nParams:\n\n\n\n\nconversationid: string\n\n\noptions?\n\n\npage?: number\n\n\noffset?: number\n\n\n\n\n\n\n\n\nclient.Conversation.get('conversationId', { page: 2, offset: 3 })", 
            "title": "Conversation"
        }, 
        {
            "location": "/api/conversation/#getall", 
            "text": "client.Conversation.getAll()", 
            "title": "getAll"
        }, 
        {
            "location": "/api/conversation/#get", 
            "text": "Params:   conversationid: string  options?  page?: number  offset?: number     client.Conversation.get('conversationId', { page: 2, offset: 3 })", 
            "title": "get"
        }, 
        {
            "location": "/api/customgallery/", 
            "text": "Imgur Documentation\n\n\nThe client must be authorized to retrieve the custom gallery a user.\n\n\nget\n\n\nParams:\n\n\n\n\noptions?\n\n\npage?: number\n\n\nsort?: 'viral' or 'top' or 'time'\n\n\nwindow?: 'day' or 'week' or 'month' or 'year' or 'all'\n\n\n\n\n\n\n\n\nclient.CustomGallery.get({ page: 2, sort: 'top', window: 'week' })\n\n\n\n\nimage\n\n\nParams:\n\n\nimageId: string\n\n\nclient.CustomGallery.image('imageId')\n\n\n\n\naddTags\n\n\nParams:\n\n\n\n\ntags string[]\n\n\n\n\nclient.CustomGallery.addTags(['tag1', 'tag2', 'tag3'])\n\n\n\n\nremoveTags\n\n\nParams:\n\n\n\n\ntags string[]\n\n\n\n\nclient.CustomGallery.removeTags(['tag1', 'tag2', 'tag3'])", 
            "title": "Custom Gallery"
        }, 
        {
            "location": "/api/customgallery/#get", 
            "text": "Params:   options?  page?: number  sort?: 'viral' or 'top' or 'time'  window?: 'day' or 'week' or 'month' or 'year' or 'all'     client.CustomGallery.get({ page: 2, sort: 'top', window: 'week' })", 
            "title": "get"
        }, 
        {
            "location": "/api/customgallery/#image", 
            "text": "Params:  imageId: string  client.CustomGallery.image('imageId')", 
            "title": "image"
        }, 
        {
            "location": "/api/customgallery/#addtags", 
            "text": "Params:   tags string[]   client.CustomGallery.addTags(['tag1', 'tag2', 'tag3'])", 
            "title": "addTags"
        }, 
        {
            "location": "/api/customgallery/#removetags", 
            "text": "Params:   tags string[]   client.CustomGallery.removeTags(['tag1', 'tag2', 'tag3'])", 
            "title": "removeTags"
        }, 
        {
            "location": "/api/gallery/", 
            "text": "Imgur Documentation\n\n\nget\n\n\nParams:\n\n\n\n\noptions?\n\n\nsection?: 'hot' or 'top' or 'user'\n\n\nsort?: 'viral' or 'top' or 'time' or 'rising'\n\n\npage?: number\n\n\nwindow?: 'day' or 'week' or 'month' or 'year' or 'all'\n\n\nshowViral?: boolean\n\n\n\n\n\n\n\n\nclient.Gallery.get({ section: 'user', sort: 'rising', page: 2 })\n\n\n\n\nmemesGallery\n\n\nParams:\n\n\n\n\noptions?\n\n\nsort?: 'viral' or 'top' or 'time'\n\n\npage?: number\n\n\nwindow?: 'day' or 'week' or 'month' or 'year' or 'all'\n\n\n\n\n\n\n\n\nclient.Gallery.memesGallery({ sort: 'time', page: 2, window: 'all' })\n\n\n\n\nmemesImage\n\n\nParams:\n\n\n\n\nimageId: string\n\n\n\n\nclient.Gallery.memesImage('imageId')\n\n\n\n\nsubredditGalleries\n\n\nParams:\n\n\n\n\nsubreddit: string\n\n\noptions?\n\n\npage?: number\n\n\nsort?: 'time' or 'top'\n\n\nwindow?: 'day' or 'week' or 'month' or 'year' or 'all'\n\n\n\n\n\n\n\n\nclient.Gallery.subredditGalleries({ page: 2, sort: 'time', window: 'day' })\n\n\n\n\nsubredditImage\n\n\nParams:\n\n\n\n\nsubreddit: string\n\n\nimageId: string\n\n\n\n\nclient.Gallery.subredditImage('subredditId', 'imageId')\n\n\n\n\ntag\n\n\nParams:\n\n\n\n\ntagName: string\n\n\noptions?\n\n\nsort?: 'viral' or 'top' or 'time' or 'rising'\n\n\npage?: number\n\n\nwindow?: 'day' or 'week' or 'month' or 'year' or 'all'\n\n\n\n\n\n\n\n\nclient.Gallery.tag('tagName', { sort: 'viral', page: 2, window: 'day' })\n\n\n\n\ntagImage\n\n\nParams:\n\n\n\n\ntagName: string\n\n\nimageId: string\n\n\n\n\nclient.Gallery.tagImage('tagName', 'imageId')\n\n\n\n\nitemTags\n\n\n\n\nitemId: string\n\n\n\n\nclient.Gallery.itemTags('itemId')\n\n\n\n\ntagVoting\n\n\nThe client must be authorized to vote on a tag.\n\n\nParams:\n\n\n\n\nitemId: string\n\n\ntagName: string\n\n\nvote: 'up' or 'down'\n\n\n\n\nclient.Gallery.tagVoting('itemId', 'tagName', 'up')\n\n\n\n\nupdateTags\n\n\nThe client must be authorized to update the tags on a gallery item.\n\n\nParams:\n\n\n\n\nitemId: string\n\n\ntags: string[]\n\n\n\n\nclient.Gallery.updateTags('itemId', ['tag1', 'tag2'])\n\n\n\n\nsearch\n\n\nIf the first param is given as a string, a simple text search will be performed. Otherwise, the combination of search options will be used.\n\n\nParams:\n\n\n\n\nsearchOption: string or\n\n\nall?: string[]\n\n\nany?: string[]\n\n\nexactly?: string\n\n\nnote?: string[]\n\n\ntype?: 'jpg' or 'png' or 'gif' or 'anigif' pr 'album'\n\n\nsize?: 'small' or 'med' or 'lrg' or 'huge'\n\n\n\n\n\n\nfilterOptions?\n\n\nsort?: 'viral' or 'top' or 'time'\n\n\nwindow?: 'day' or 'week' or 'month' or 'year' or 'all'\n\n\npage?: number\n\n\n\n\n\n\n\n\nThe following search for 'cats' only.\n\n\nclient.Gallery.search('cats')\n\n\n\n\nThe following will search for 'cats' but not 'dogs' or 'mice' that are of type 'gif'\n\n\nclient.Gallery.search({ all: ['cats'], not: ['dogs', 'mice'], type: 'gif' })\n\n\n\n\nrandom\n\n\nclient.Gallery.random()\n\n\n\n\nshare\n\n\nParams:\n\n\n\n\nitemId: string\n\n\ntitle: string\n\n\noptions?\n\n\ntopic?: string\n\n\nbypassTerms?: boolean\n\n\nmature?: boolean\n\n\ntags?: string[]\n\n\n\n\n\n\n\n\nclient.Gallery.share('itemId', { topic: 'some topic', bypassTerms: false, mature: false, tags: ['tag1', 'tag2'] })\n\n\n\n\nremove\n\n\nThe client must be authorized to remove a post from the gallery.\n\n\nParams:\n\n\n\n\nitemId:? string\n\n\n\n\nclient.Gallery.remove('itemId')\n\n\n\n\nalbum\n\n\nParams:\n\n\n-albumId: string\n\n\nclient.Gallery.album('albumId')\n\n\n\n\nimage\n\n\nParams:\n\n\n\n\nimageId: string\n\n\n\n\nclient.Gallery.image('imageId')\n\n\n\n\nreport\n\n\nRefer to the \nImgur documentation\n on which numbers refer to which reporting reason.\n\n\nParams:\n\n\n\n\nitemId: string\n\n\nreason?: number\n\n\n\n\nclient.Gallery.report({ section: 'user', sort: 'rising', page: 2 })\n\n\n\n\nvotes\n\n\nParams:\n\n\n\n\nitemId: string\n\n\n\n\nclient.Gallery.votes('itemId')\n\n\n\n\ncomments\n\n\nParams:\n\n\n\n\nitemId: string\n\n\nsort?: 'best' or 'top' or 'new'\n\n\n\n\nclient.Gallery.comments('itemId', 'best')\n\n\n\n\ncomment\n\n\nParams:\n\n\n\n\ncommentId: string\n\n\n\n\nclient.Gallery.commemnt('commentId')\n\n\n\n\ncommentCreate\n\n\nParams:\n\n\n\n\nitemId: string\n\n\ncomment: string\n\n\n\n\nclient.Gallery.commentCreate('itemId', 'this is a comment')\n\n\n\n\ncommentReply\n\n\nParams:\n\n\n\n\nitemId: string\n\n\ncommentId: string\n\n\ncomment: string\n\n\n\n\nclient.Gallery.commentReply('itemId', 'commentId', 'this is a comment')\n\n\n\n\ncommentIds\n\n\nParams:\n\n\n\n\nitemId: string\n\n\n\n\nclient.Gallery.commentIds('itemId')\n\n\n\n\ncommentCount\n\n\nParams:\n\n\n\n\nitemId: string\n\n\n\n\nclient.Gallery.commentCount('itemId')", 
            "title": "Gallery"
        }, 
        {
            "location": "/api/gallery/#get", 
            "text": "Params:   options?  section?: 'hot' or 'top' or 'user'  sort?: 'viral' or 'top' or 'time' or 'rising'  page?: number  window?: 'day' or 'week' or 'month' or 'year' or 'all'  showViral?: boolean     client.Gallery.get({ section: 'user', sort: 'rising', page: 2 })", 
            "title": "get"
        }, 
        {
            "location": "/api/gallery/#memesgallery", 
            "text": "Params:   options?  sort?: 'viral' or 'top' or 'time'  page?: number  window?: 'day' or 'week' or 'month' or 'year' or 'all'     client.Gallery.memesGallery({ sort: 'time', page: 2, window: 'all' })", 
            "title": "memesGallery"
        }, 
        {
            "location": "/api/gallery/#memesimage", 
            "text": "Params:   imageId: string   client.Gallery.memesImage('imageId')", 
            "title": "memesImage"
        }, 
        {
            "location": "/api/gallery/#subredditgalleries", 
            "text": "Params:   subreddit: string  options?  page?: number  sort?: 'time' or 'top'  window?: 'day' or 'week' or 'month' or 'year' or 'all'     client.Gallery.subredditGalleries({ page: 2, sort: 'time', window: 'day' })", 
            "title": "subredditGalleries"
        }, 
        {
            "location": "/api/gallery/#subredditimage", 
            "text": "Params:   subreddit: string  imageId: string   client.Gallery.subredditImage('subredditId', 'imageId')", 
            "title": "subredditImage"
        }, 
        {
            "location": "/api/gallery/#tag", 
            "text": "Params:   tagName: string  options?  sort?: 'viral' or 'top' or 'time' or 'rising'  page?: number  window?: 'day' or 'week' or 'month' or 'year' or 'all'     client.Gallery.tag('tagName', { sort: 'viral', page: 2, window: 'day' })", 
            "title": "tag"
        }, 
        {
            "location": "/api/gallery/#tagimage", 
            "text": "Params:   tagName: string  imageId: string   client.Gallery.tagImage('tagName', 'imageId')", 
            "title": "tagImage"
        }, 
        {
            "location": "/api/gallery/#itemtags", 
            "text": "itemId: string   client.Gallery.itemTags('itemId')", 
            "title": "itemTags"
        }, 
        {
            "location": "/api/gallery/#tagvoting", 
            "text": "The client must be authorized to vote on a tag.  Params:   itemId: string  tagName: string  vote: 'up' or 'down'   client.Gallery.tagVoting('itemId', 'tagName', 'up')", 
            "title": "tagVoting"
        }, 
        {
            "location": "/api/gallery/#updatetags", 
            "text": "The client must be authorized to update the tags on a gallery item.  Params:   itemId: string  tags: string[]   client.Gallery.updateTags('itemId', ['tag1', 'tag2'])", 
            "title": "updateTags"
        }, 
        {
            "location": "/api/gallery/#search", 
            "text": "If the first param is given as a string, a simple text search will be performed. Otherwise, the combination of search options will be used.  Params:   searchOption: string or  all?: string[]  any?: string[]  exactly?: string  note?: string[]  type?: 'jpg' or 'png' or 'gif' or 'anigif' pr 'album'  size?: 'small' or 'med' or 'lrg' or 'huge'    filterOptions?  sort?: 'viral' or 'top' or 'time'  window?: 'day' or 'week' or 'month' or 'year' or 'all'  page?: number     The following search for 'cats' only.  client.Gallery.search('cats')  The following will search for 'cats' but not 'dogs' or 'mice' that are of type 'gif'  client.Gallery.search({ all: ['cats'], not: ['dogs', 'mice'], type: 'gif' })", 
            "title": "search"
        }, 
        {
            "location": "/api/gallery/#random", 
            "text": "client.Gallery.random()", 
            "title": "random"
        }, 
        {
            "location": "/api/gallery/#share", 
            "text": "Params:   itemId: string  title: string  options?  topic?: string  bypassTerms?: boolean  mature?: boolean  tags?: string[]     client.Gallery.share('itemId', { topic: 'some topic', bypassTerms: false, mature: false, tags: ['tag1', 'tag2'] })", 
            "title": "share"
        }, 
        {
            "location": "/api/gallery/#remove", 
            "text": "The client must be authorized to remove a post from the gallery.  Params:   itemId:? string   client.Gallery.remove('itemId')", 
            "title": "remove"
        }, 
        {
            "location": "/api/gallery/#album", 
            "text": "Params:  -albumId: string  client.Gallery.album('albumId')", 
            "title": "album"
        }, 
        {
            "location": "/api/gallery/#image", 
            "text": "Params:   imageId: string   client.Gallery.image('imageId')", 
            "title": "image"
        }, 
        {
            "location": "/api/gallery/#report", 
            "text": "Refer to the  Imgur documentation  on which numbers refer to which reporting reason.  Params:   itemId: string  reason?: number   client.Gallery.report({ section: 'user', sort: 'rising', page: 2 })", 
            "title": "report"
        }, 
        {
            "location": "/api/gallery/#votes", 
            "text": "Params:   itemId: string   client.Gallery.votes('itemId')", 
            "title": "votes"
        }, 
        {
            "location": "/api/gallery/#comments", 
            "text": "Params:   itemId: string  sort?: 'best' or 'top' or 'new'   client.Gallery.comments('itemId', 'best')", 
            "title": "comments"
        }, 
        {
            "location": "/api/gallery/#comment", 
            "text": "Params:   commentId: string   client.Gallery.commemnt('commentId')", 
            "title": "comment"
        }, 
        {
            "location": "/api/gallery/#commentcreate", 
            "text": "Params:   itemId: string  comment: string   client.Gallery.commentCreate('itemId', 'this is a comment')", 
            "title": "commentCreate"
        }, 
        {
            "location": "/api/gallery/#commentreply", 
            "text": "Params:   itemId: string  commentId: string  comment: string   client.Gallery.commentReply('itemId', 'commentId', 'this is a comment')", 
            "title": "commentReply"
        }, 
        {
            "location": "/api/gallery/#commentids", 
            "text": "Params:   itemId: string   client.Gallery.commentIds('itemId')", 
            "title": "commentIds"
        }, 
        {
            "location": "/api/gallery/#commentcount", 
            "text": "Params:   itemId: string   client.Gallery.commentCount('itemId')", 
            "title": "commentCount"
        }, 
        {
            "location": "/api/image/", 
            "text": "Imgur Documentation\n\n\nget\n\n\nParams:\n\n\n\n\nimageId: string\n\n\n\n\nclient.Image.get('imageId')\n\n\n\n\nupload\n\n\nImages can be uploaded as a base64 string, url or a raw Buffer. If a string is passed in, the file will be uploaded as base64 by default. To upload as a url, you must pass the relevant \ntype\n in the options.\n\n\nNote: Upload options are not supported when uploading by Buffer. Combine this with \nupdate\n.\n\n\nYou do not have to be authorized to upload an image. \n\n\nParams:\n\n\n\n\nimage: string or Buffer\n\n\noptions?\n\n\ntitle?: string\n\n\ntype?: 'base64' or 'url'\n\n\nalbum?: string\n\n\ndescription?: string\n\n\nname?: string\n\n\n\n\n\n\n\n\nclient.Image.upload('base64 encoded string', { title: 'some title', album: 'albumId' })\n\n\n\n\nclient.Image.upload('http://example.com/image.png', { type: 'url', title: 'some title', album: 'albumId' })\n\n\n\n\nconst file = fs.readFileSync('image.png')\nclient.Image.upload(file)\n\n\n\n\nremove\n\n\nThe client must be authorized to remove an image of that user.\n\n\nParams:\n\n\n\n\nimageId: string\n\n\n\n\nclient.Image.remove('imageId')\n\n\n\n\nupdate\n\n\nParams:\n\n\n\n\nimageId: string\n\n\noptions?\n\n\ntitle?: string\n\n\ndescriptiom?: string\n\n\n\n\n\n\n\n\nclient.Image.update('imageId', { title: 'new title' })\n\n\n\n\nfavorite\n\n\nParams:\n\n\n\n\nimageId: string\n\n\n\n\nclient.Image.favorite('imageId')", 
            "title": "Image"
        }, 
        {
            "location": "/api/image/#get", 
            "text": "Params:   imageId: string   client.Image.get('imageId')", 
            "title": "get"
        }, 
        {
            "location": "/api/image/#upload", 
            "text": "Images can be uploaded as a base64 string, url or a raw Buffer. If a string is passed in, the file will be uploaded as base64 by default. To upload as a url, you must pass the relevant  type  in the options.  Note: Upload options are not supported when uploading by Buffer. Combine this with  update .  You do not have to be authorized to upload an image.   Params:   image: string or Buffer  options?  title?: string  type?: 'base64' or 'url'  album?: string  description?: string  name?: string     client.Image.upload('base64 encoded string', { title: 'some title', album: 'albumId' })  client.Image.upload('http://example.com/image.png', { type: 'url', title: 'some title', album: 'albumId' })  const file = fs.readFileSync('image.png')\nclient.Image.upload(file)", 
            "title": "upload"
        }, 
        {
            "location": "/api/image/#remove", 
            "text": "The client must be authorized to remove an image of that user.  Params:   imageId: string   client.Image.remove('imageId')", 
            "title": "remove"
        }, 
        {
            "location": "/api/image/#update", 
            "text": "Params:   imageId: string  options?  title?: string  descriptiom?: string     client.Image.update('imageId', { title: 'new title' })", 
            "title": "update"
        }, 
        {
            "location": "/api/image/#favorite", 
            "text": "Params:   imageId: string   client.Image.favorite('imageId')", 
            "title": "favorite"
        }, 
        {
            "location": "/api/memegen/", 
            "text": "Imgur Documentation\n\n\ndefaults\n\n\nclient.Memegen.defaults()", 
            "title": "Memegen"
        }, 
        {
            "location": "/api/memegen/#defaults", 
            "text": "client.Memegen.defaults()", 
            "title": "defaults"
        }, 
        {
            "location": "/api/notification/", 
            "text": "Imgur Documentation\n\n\nThe client must be authorized to retrieve notifications of a user.\n\n\ngetAll\n\n\nParams:\n\n\n\n\nunreadOnly?: boolean\n\n\n\n\nclient.Notification.getAll(false)\n\n\n\n\nget\n\n\nParams:\n\n\n\n\nnotificationId: string\n\n\n\n\nclient.Notification.get('notificationId')\n\n\n\n\nmarkAsRead\n\n\nParams:\n\n\n\n\nnotificationId: string\n\n\n\n\nclient.Notification.markAsRead('notificationId')", 
            "title": "Notification"
        }, 
        {
            "location": "/api/notification/#getall", 
            "text": "Params:   unreadOnly?: boolean   client.Notification.getAll(false)", 
            "title": "getAll"
        }, 
        {
            "location": "/api/notification/#get", 
            "text": "Params:   notificationId: string   client.Notification.get('notificationId')", 
            "title": "get"
        }, 
        {
            "location": "/api/notification/#markasread", 
            "text": "Params:   notificationId: string   client.Notification.markAsRead('notificationId')", 
            "title": "markAsRead"
        }, 
        {
            "location": "/api/topic/", 
            "text": "Imgur Documentation\n\n\ndefaults\n\n\nParams:\n\n\nclient.Topic.defaults()\n\n\n\n\ngalleryTopics\n\n\nParams:\n\n\n\n\ntopicId: string\n\n\noptions\n\n\nsort?: 'viral' or 'top' or 'time'\n\n\npage?: number\n\n\nwindow?: 'day' or 'week' or 'month' or 'year' or 'all'\n\n\n\n\n\n\n\n\nclient.Notification.get('topicId', { sort: 'viral', page: 2, window: 'day' })\n\n\n\n\ntopicItem\n\n\nParams:\n\n\n\n\ntopicItem: string\n\n\nitemId: string\n\n\n\n\nclient.Notification.markAsRead('topicItem', 'itemId')", 
            "title": "Topic"
        }, 
        {
            "location": "/api/topic/#defaults", 
            "text": "Params:  client.Topic.defaults()", 
            "title": "defaults"
        }, 
        {
            "location": "/api/topic/#gallerytopics", 
            "text": "Params:   topicId: string  options  sort?: 'viral' or 'top' or 'time'  page?: number  window?: 'day' or 'week' or 'month' or 'year' or 'all'     client.Notification.get('topicId', { sort: 'viral', page: 2, window: 'day' })", 
            "title": "galleryTopics"
        }, 
        {
            "location": "/api/topic/#topicitem", 
            "text": "Params:   topicItem: string  itemId: string   client.Notification.markAsRead('topicItem', 'itemId')", 
            "title": "topicItem"
        }, 
        {
            "location": "/uploading/", 
            "text": "Images can be uploaded using either a base64 encoded string, web url or Buffer.\n\n\nconst imageAsBase64 = fs.readFileSync('./someimage.png', 'base64')\n\nawait client.Image.upload(imageAsBase64)\n\n\n\n\nIf a web url is being uploaded, it must be specified in the \ntype\n option. Other options can be specified here including title and description. See the \nimgur docs\n for more.\n\n\nawait client.Image.upload('https://example.com/image.png', { type: 'url' })\n\n\n\n\nSee \nClient.Image.upload\n for more information.", 
            "title": "Uploading"
        }, 
        {
            "location": "/ratelimits/", 
            "text": "The imgur API is rate limited (see \nhttps://api.imgur.com/#limits\n).\n\n\nThe rate limits can be found under the Client.RateLimits object. \n\n\nYou can fetch the most recent rate limit by calling \nClient.Credits.get()\n.\n\n\nconst client = new Client('43652b743b5a7a0')\nconst limits = await client.Credits.get()\n\nconsole.log(limits)\n\n\n\n\n{\n  \ndata\n: {\n    \nUserLimit\n: 2000,\n    \nUserRemaining\n: 2000,\n    \nUserReset\n: 1491753805,\n    \nClientReset\n: 12500,\n    \nClientRemaining\n: 12408\n  },\n  \nsuccess\n: true,\n  \nstatus\n: 200\n}\n\n\n\n\nThe Client.RateLimits object will be updated to reflect these new values.\n\n\nHint: \nclient.toString()\n will print all the relevant information.\n\n\nAccess Token: 92ff46119ace5e5728ac580a0ed3ee02a011ed82\nClient ID: 43652b743b5a7a3\nClient Secret: 2817603add0052fc9920bd3896abdd26992cf424\nRefresh Token: 4235a53f31464ed1c9e7099e414af25cb9c7ef32\n--- Rate Limits\nClient Limit: 12500\nClient Remaining: 12408\nUser Limit: 2000\nUser Remaining: 2000\nUser Reset: Wed Apr 26 2017 22:25:58 GMT+0100 (BST)\nIP Limit: 1250\nIP Remaining: 1249\nIP Reset: Sun Apr 09 2017 17:02:00 GMT+0100 (BST)\n\n\n\n\nThese are also updated when a request is made. However, not all rates are returned with all calls so this is more of a guide than a hard number.", 
            "title": "Rate Limits"
        }, 
        {
            "location": "/errors/", 
            "text": "Handled errors will be thrown with the response status and the data (if any) returned from imgur.\n\n\nconst client = new Client()\n\nclient.Account.sendVerificationEmail() // Required authentication.\n\n\n\n\n{\n  \nstatus\n: 403,\n  \nbody\n: {\n    \nerror\n: \nMalformed auth header.\n,\n    \nmethod\n: \nPOST\n\n  },\n  \nsuccess\n: false,\n  \nstatus\n: 403\n}", 
            "title": "Error Handling"
        }, 
        {
            "location": "/contributing/", 
            "text": "Development is currently active at \nhttps://github.com/rmp135/imgur\n\n\nPull requests welcome!\n\n\nTo build the client for development, simply build the Typescript files.\n\n\nyarn build\n \n\n\nYou can run tests with:\n\n\nyarn test\n\n\n\n\nThere is also a helper task for watching the tests. This requires \nnodemon\n to be installed.\n\n\nyarn test:watch", 
            "title": "Contributing"
        }, 
        {
            "location": "/typescript/", 
            "text": "This library is written with full support for Typescript.\n\n\nThe response types are taken from \nhttps://api.imgur.com/models\n. However, they don't all appear to follow the specified documentation so there may be some irregularities.\n\n\nFull disclaimer: this is my first published Typescript project so it might be a little rough around the edges.\n\n\nAll request types and interfaces can be found on the global \nOptions\n namespace. These are usually joined together to form the final option interface.\n\n\nThe main '@rmp135/imgur' module also contains a \nClientConfig\n interface and \nReportReasonEnum\n for reporting. Import these if you require them.", 
            "title": "Typescript"
        }
    ]
}