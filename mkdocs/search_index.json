{
    "docs": [
        {
            "location": "/", 
            "text": "A Typescript compatible imgur client for node.\n\n\nGetting Started\n\n\nInstall using npm.\n\n\nnpm install @rmp135/imgur\n\n\n\n\nor yarn\n\n\nyarn add @rmp135/imgur\n\n\n\n\nimport the Client from the package.\n\n\nimport { Client } from @rmp135/imgur\n\n\n\n\nInstantiate the Client with your credentails and call the relevant API endpoint. If you do not have credentials, refer to the \nauthorization\n documentation on how to obtain these.\n\n\nThe documentation in this guide will be written with Typescript / ES7 in mind. The \n.then / .catch\n callbacks still function as you would expect.\n\n\nlet client = new Client('43652b743b5a7a0')\n\n// The client can also be initialised with authorization information.\n\nclient = new Client({\n  access_token: 'be3fb3e75b229254c8a44e41e376bfc01154ba42',\n  client_id: '43652b743b5a7a2',\n  client_secret: '2817603add0052fc9920bd3896abdd26992cf422',\n  refresh_token: '71f0489801d0d6ae906f51ea20ae562b2ef18d42'\n})\n\nconst images = await client.Gallery.subRedditGalleries('pics')\n\nconsole.log(images)", 
            "title": "Home"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Install using npm.  npm install @rmp135/imgur  or yarn  yarn add @rmp135/imgur  import the Client from the package.  import { Client } from @rmp135/imgur  Instantiate the Client with your credentails and call the relevant API endpoint. If you do not have credentials, refer to the  authorization  documentation on how to obtain these.  The documentation in this guide will be written with Typescript / ES7 in mind. The  .then / .catch  callbacks still function as you would expect.  let client = new Client('43652b743b5a7a0')\n\n// The client can also be initialised with authorization information.\n\nclient = new Client({\n  access_token: 'be3fb3e75b229254c8a44e41e376bfc01154ba42',\n  client_id: '43652b743b5a7a2',\n  client_secret: '2817603add0052fc9920bd3896abdd26992cf422',\n  refresh_token: '71f0489801d0d6ae906f51ea20ae562b2ef18d42'\n})\n\nconst images = await client.Gallery.subRedditGalleries('pics')\n\nconsole.log(images)", 
            "title": "Getting Started"
        }, 
        {
            "location": "/authorization/", 
            "text": "Imgur documentation: \nhttps://api.imgur.com/oauth2\n\n\nimgur uses oath2 for authorization. A number of ways exist to retrieve the access token and refresh token from the user. All of which are supported by this client.\n\n\nThe following tokens are available on the client.\n\n\n\n\nclient_id\n\n\nclient_secret\n\n\nclient_token\n\n\nrefresh_token\n\n\n\n\nAll authorization call (except regenerating from a refresh token) return a url for the user to log in and an \nauthorize\n function to authorize that the information supplied by the user is correct.\n\n\nThe application state argument can be ommitted in all cases.\n\n\nbyCode\n\n\nThis returns the authorization code as a url parameter that must be exchanged for the access code.\n\n\n\nclient = new Client('43652b743b5a7a0')\n\nconst auth = client.Authorize.byCode('application state') \n\nconsole.log(auth.url)\n\n// The user navigates to the url, enters their credentials and a url with a `code` url parameter is returned. Put this code into the `authorize` function.\n\nconst tokens = await auth.authorize('d2a73efa3c92ba24a1285eddeb3c06b7abcf44b2')\n\n// If successful, the authorization tokens will be returned and populated on the client.\n\n\n\n\n\nbyToken\n\n\nThis returns the code as a url that can be parsed to extract the access code and refresh token.\n\n\n\nclient = new Client('43652b743b5a7a0')\n\nconst auth = client.Authorize.byToken('application state') \n\nconsole.log(auth.url)\n\n// The user navigates to the url and enters their credentials. A url with the access credentials are then returned. Put this url into the 'authorize' function.\n\nconst tokens = auth.authorize('https://imgur.com/#access_token=c6f67dc9be42c74cfb052a640d51b056d9a06c42\nexpires_in=2419200\ntoken_type=bearer\nrefresh_token=94294ec17cf55ac9650f0e040649d8985cf624d4\naccount_username=rmp135\naccount_id=4118974')\n\n// If successful, the authorization tokens will be returned and populated on the client.\n\n\n\n\n\nbyPIN\n\n\nThis returns a url that, when the user logs in, is displayed with a PIN code. Enter this PIN code into the authorize function.\n\n\n\nclient = new Client('43652b743b5a7a0')\n\nconst auth = client.Authorize.byPIN('application state') \n\nconsole.log(auth.url)\n\n// The user navigates to the url and enters their credentials. A page with a PIN code will be displayed. Pass this into the authorize function.\n\nconst tokens = auth.authorize('4118974')\n\n// If successful, the authorization tokens will be returned and populated on the client.\n\n\n\n\n\nregenerateFromRefreshToken\n\n\nThis will regenerate the access token from a refresh token.\n\n\n\nclient = new Client('43652b743b5a7a0')\n\n// If the refresh token is not supplied, it will be taken from the client. If neither are supplied, a warning is shown and null is returned.\n\nconst auth = await client.Authorize.regenerateFromRefreshToken('94294ec17cf55ac9650f0e040649d8985cf624d4') \n\nconsole.log(auth)\n\n// If successful, the authorization tokens will be returned and populated on the client.", 
            "title": "Authorization"
        }, 
        {
            "location": "/authorization/#bycode", 
            "text": "This returns the authorization code as a url parameter that must be exchanged for the access code.  \nclient = new Client('43652b743b5a7a0')\n\nconst auth = client.Authorize.byCode('application state') \n\nconsole.log(auth.url)\n\n// The user navigates to the url, enters their credentials and a url with a `code` url parameter is returned. Put this code into the `authorize` function.\n\nconst tokens = await auth.authorize('d2a73efa3c92ba24a1285eddeb3c06b7abcf44b2')\n\n// If successful, the authorization tokens will be returned and populated on the client.", 
            "title": "byCode"
        }, 
        {
            "location": "/authorization/#bytoken", 
            "text": "This returns the code as a url that can be parsed to extract the access code and refresh token.  \nclient = new Client('43652b743b5a7a0')\n\nconst auth = client.Authorize.byToken('application state') \n\nconsole.log(auth.url)\n\n// The user navigates to the url and enters their credentials. A url with the access credentials are then returned. Put this url into the 'authorize' function.\n\nconst tokens = auth.authorize('https://imgur.com/#access_token=c6f67dc9be42c74cfb052a640d51b056d9a06c42 expires_in=2419200 token_type=bearer refresh_token=94294ec17cf55ac9650f0e040649d8985cf624d4 account_username=rmp135 account_id=4118974')\n\n// If successful, the authorization tokens will be returned and populated on the client.", 
            "title": "byToken"
        }, 
        {
            "location": "/authorization/#bypin", 
            "text": "This returns a url that, when the user logs in, is displayed with a PIN code. Enter this PIN code into the authorize function.  \nclient = new Client('43652b743b5a7a0')\n\nconst auth = client.Authorize.byPIN('application state') \n\nconsole.log(auth.url)\n\n// The user navigates to the url and enters their credentials. A page with a PIN code will be displayed. Pass this into the authorize function.\n\nconst tokens = auth.authorize('4118974')\n\n// If successful, the authorization tokens will be returned and populated on the client.", 
            "title": "byPIN"
        }, 
        {
            "location": "/authorization/#regeneratefromrefreshtoken", 
            "text": "This will regenerate the access token from a refresh token.  \nclient = new Client('43652b743b5a7a0')\n\n// If the refresh token is not supplied, it will be taken from the client. If neither are supplied, a warning is shown and null is returned.\n\nconst auth = await client.Authorize.regenerateFromRefreshToken('94294ec17cf55ac9650f0e040649d8985cf624d4') \n\nconsole.log(auth)\n\n// If successful, the authorization tokens will be returned and populated on the client.", 
            "title": "regenerateFromRefreshToken"
        }, 
        {
            "location": "/api/", 
            "text": "The API function names attempt to follow the naming conventions from \nhttps://api.imgur.com/endpoints\n\n\nAll calls are returned as a response wrapped in a Promise.\n\n\nconst client = new Client('43652b743b5a7a0')\n\nlet images = await client.Gallery.album('9WaZy')\n\n\n\n\n{\n  \ndata\n:{\n    \nid\n:\n9WaZy\n,\n    \ntitle\n:\nDisco\n,\n    \ndescription\n:null,\n    \ndatetime\n:1491732441,\n    \ncover\n:\ncuNH0dL\n,\n    \ncover_width\n:2160,\n    \ncover_height\n:2160,\n    \naccount_url\n:\nJoMostert\n,\n    \naccount_id\n:40476684,\n    \nprivacy\n:\npublic\n,\n    \nlayout\n:\nblog\n,\n    \nviews\n:35,\n    \nlink\n:\nhttp://imgur.com/a/9WaZy\n,\n    \nups\n:0,\n    \ndowns\n:1,\n    \npoints\n:-1,\n    \nscore\n:-1,\n    \nis_album\n:true,\n    \nvote\n:null,\n    \nfavorite\n:false,\n    \nnsfw\n:false,\n    \nsection\n:\n,\n    \ncomment_count\n:0,\n    \ntopic\n:\nNo Topic\n,\n    \ntopic_id\n:29,\n    \nimages_count\n:1,\n    \nin_gallery\n:true,\n    \nis_ad\n:false,\n    \ntags\n:[\n\n    ],\n    \nin_most_viral\n:false,\n    \nimages\n:[\n      {\n        \nid\n:\ncuNH0dL\n,\n        \ntitle\n:null,\n        \ndescription\n:null,\n        \ndatetime\n:1491732411,\n        \ntype\n:\nimage/jpeg\n,\n        \nanimated\n:false,\n        \nwidth\n:2160,\n        \nheight\n:2160,\n        \nsize\n:1910015,\n        \nviews\n:114,\n        \nbandwidth\n:217741710,\n        \nvote\n:null,\n        \nfavorite\n:false,\n        \nnsfw\n:null,\n        \nsection\n:null,\n        \naccount_url\n:null,\n        \naccount_id\n:null,\n        \nis_ad\n:false,\n        \ntags\n:[\n\n        ],\n        \nin_most_viral\n:false,\n        \nin_gallery\n:false,\n        \nlink\n:\nhttp://i.imgur.com/cuNH0dL.jpg\n,\n        \ncomment_count\n:null,\n        \nups\n:null,\n        \ndowns\n:null,\n        \npoints\n:null,\n        \nscore\n:null\n      }\n    ]\n  },\n  \nsuccess\n:true,\n  \nstatus\n:200\n}\n\n\n\n\nSome API calls require authentication before calling. Refer to the \nauthorization\n documentation.\n\n\nCalls that have required fields will be required as inline parameters, any optional parameters may be specified as an object.\n\n\nconst client = new Client('43652b743b5a7a0')\n\nlet images = await client.Gallery.tag('tag name')\n\nimages = await client.Gallery.tag('tag name', { page: 2, sort: 'top', window: 'all' })\n\nconsole.log(images)\n\n\n\n\nSome calls specify a username. This can either be ommitted or passed as \nnull\n to use the currently authorized user.\n\n\nconst client = new Client('43652b743b5a7a0')\n\nlet images = await client.Account.favorites()\n\nimages = await client.Account.favorites(null, { page: 2, sort: 'best' })\n\nconsole.log(images)\n\n\n\n\nDue to \ndelete\n being a keyword, this has been renamed to \nremove\n instead. e.g. \nClient.Image.remove(23)\n to delete an image.", 
            "title": "API"
        }, 
        {
            "location": "/uploading/", 
            "text": "Images can be uploaded using either a base64 encoded string or web url. Other methods of uploading are currently being developed.\n\n\nconst imageAsBase64 = fs.readFileSync('./someimage.png', 'base64')\n\nawait client.Image.upload(imageAsBase64)\n\n\n\n\nIf a web url is being uploaded, it must be specified in the \ntype\n option. Other options can be specified here including title and description. See the \nimgur docs\n for more.\n\n\nawait client.Image.upload('https://example.com/image.png', { type: 'url' })", 
            "title": "Uploading"
        }, 
        {
            "location": "/ratelimits/", 
            "text": "The imgur API is rate limited (see \nhttps://api.imgur.com/#limits\n).\n\n\nThe rate limits can be found under the Client.RateLimits object. \n\n\nThese are populated when a request is made. However, not all rates are returned so this is more of a guide than a hard number.", 
            "title": "Rate Limits"
        }, 
        {
            "location": "/errors/", 
            "text": "Handled errors will be thrown with the response status and the data (if any) returned from imgur.\n\n\nconst client = new Client()\n\nclient.Account.sendVerificationEmail() // Required authentication.\n\n\n\n\n{\n  \nstatus\n: 403,\n  \nbody\n: {\n    \nerror\n: \nMalformed auth header.\n,\n    \nmethod\n: \nPOST\n\n  },\n  \nsuccess\n: false,\n  \nstatus\n: 403\n}", 
            "title": "Error Handling"
        }, 
        {
            "location": "/typescript/", 
            "text": "This library is written with full support for Typescript.\n\n\nThe response types are taken from \nhttps://api.imgur.com/models\n. However, they don't all appear to follow the specified documentation so there may be some irregularities.\n\n\nFull dislaimer: this is my first published Typescript project so it might be a little rough around the edges.\n\n\nAll request types and interfaces can be found on the global \nOptions\n namespace. These are usually joined togethe to form the final option interface.\n\n\nThe main '@rmp135/imgur' package also contains a \nClientConfig\n interface and \nReportReasonEnum\n for reporting. Import these if you require them.", 
            "title": "Typescript"
        }
    ]
}